<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>on Jasper de Winther</title><link>https://jasperdewinther.github.io/</link><description>Recent content in on Jasper de Winther</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jasperdewinther.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Advanced Graphics @UU</title><link>https://jasperdewinther.github.io/posts/advanced-graphics/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://jasperdewinther.github.io/posts/advanced-graphics/</guid><description>This course was one of the major reasons why I wanted to do my master&amp;rsquo;s at Utrecht University, and it delivered. For the first time, I could work on a ray tracer with the help of a very good and dedicated lecturer, namely Jacco Bikker. During the course, we first implemented a Whitted style ray tracer (on the CPU). I was pleasantly surprised with the performance, as I thought nothing could be rendered (let alone ray traced) on the CPU.</description></item><item><title>Voxels</title><link>https://jasperdewinther.github.io/posts/voxels/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://jasperdewinther.github.io/posts/voxels/</guid><description>As quite some people do, I got inspired by John Lin&amp;rsquo;s voxel engine and thus, got started researching how voxels work. At first, I started with a meshing based approach similar to minecraft and got some basic lighting going. One of the first real issues I encountered was with transparency, as I did not have much experience with graphics I did not realize it would be such a hassle to render transparent water for example.</description></item><item><title>Principal component analysis of League of Legends Champions</title><link>https://jasperdewinther.github.io/posts/principal-component-analysis-of-league-of-legends-champions/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://jasperdewinther.github.io/posts/principal-component-analysis-of-league-of-legends-champions/</guid><description>League of Legends is a popular 5 vs 5 game where matches last between 20 and 40 minutes (usually) and you can choose to play any out of 150+ champions, each differing in play style, strengths and weaknesses. Most players have a certain play style or champion which they prefer, while some just play whatever they feel like playing. Since I regularly play League with my friends and was stuck deciding which champion I should play next, I did a principal component analysis based on data scraped from a popular League statistics website named lolalytics.</description></item><item><title>Drone follow @HU</title><link>https://jasperdewinther.github.io/posts/drone-follow/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://jasperdewinther.github.io/posts/drone-follow/</guid><description>For this assignment, we were meant to use PID systems in some form to control movement in the real world. So me, being stuck in my room during a corona lock down, had no hardware in my house besides a Tello drone. Due to this, I was basically forced to implement a PID controller for each of the 4 degrees of freedom of the drone. This allowed for quite fine-grained control of the drone, even in small spaces, such as my room.</description></item><item><title>Real time strategy game @HU</title><link>https://jasperdewinther.github.io/posts/rts-game/</link><pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate><guid>https://jasperdewinther.github.io/posts/rts-game/</guid><description>During the 2nd year of my bachelor, me and five others made a real time strategy (RTS) game. The assignment was to make a game (without the use of a full game engine), and as we all enjoyed Age of Empires, we decided to make an RTS. We thought this would be an interesting challenge as it required an enemy who would autonomously control their units. Furthermore, it required additional path finding AI for all units.</description></item><item><title>About</title><link>https://jasperdewinther.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jasperdewinther.github.io/about/</guid><description>I&amp;rsquo;m currently a first year master&amp;rsquo;s student at Utrecht University, studying Game and Media Technology. Previously I studied at Technical University Eindhoven, HU University of Applied Sciences and have done internships at VicarVision and Sentient Information systems. I enjoy working on real time systems such as computer vision, graphics or machine learning.
In my spare time I enjoy bouldering, programming, calisthenics, cooking and playing/analyzing games.</description></item><item><title>Contact</title><link>https://jasperdewinther.github.io/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jasperdewinther.github.io/contact/</guid><description>You can contact find me in the following places:
Discord: deJasper36#6327 LinkedIn: Jasper de Winther Email: jasperdewinther@gmail.com Github: Jasper de Winther Twitter: @J__Winther Mastodon: @Jasper_wwww@mastodon.gamedev.place</description></item></channel></rss>